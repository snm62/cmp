"use strict";
const SITE_CONFIGS = {
  'webflow-test-website123.webflow.io': {
    bannerType: 'ccpa',
      // This site will use the CCPA-compliant banner
  }
};
const CMP_SCRIPT = `(async function () {
  let isLoadingState = false;
  let consentState = {};
  let observer;
  let isInitialized = false;

  // Update loadConsentState to handle persistence better
async function loadConsentState() {
  if (isLoadingState) {
    
    return;
 }
    isLoadingState = true;

    blockAllInitialRequests();
    blockAllScripts();
    
    const consentGiven = localStorage.getItem("consent-given");
    
    if (consentGiven === "true") {
        try {
            const savedPreferences = JSON.parse(localStorage.getItem("consent-preferences"));
            if (savedPreferences?.encryptedData) {
                const decryptedData = await decryptData(
                    savedPreferences.encryptedData,
                    await importKey(Uint8Array.from(savedPreferences.key)),
                    Uint8Array.from(savedPreferences.iv)
                );
                consentState = JSON.parse(decryptedData);
            }
        } catch (error) {
            console.error("Error loading consent state:", error);
            consentState = { analytics: false };
        }
    } else {
        consentState = { analytics: false };
    }
    
    
    initialBlockingEnabled = !consentState.analytics;
    
    // Always scan and block on initial load
    blockAllScripts();
    
    // If analytics are accepted, unblock after initial scan
    if (!initialBlockingEnabled) {
        unblockScripts();
    }
    isLoadingState = false;
}
function blockAllScripts() {
    
    blockMetaFunctions();
    blockAnalyticsRequests();
    scanAndBlockScripts();
    blockDynamicScripts();
    createPlaceholderScripts();
}
 
function unblockScripts() {
  
  
  blockedScripts.forEach(placeholder => {
      if (placeholder.dataset.src) {
          const script = document.createElement('script');
          script.src = placeholder.dataset.src;
          script.async = placeholder.dataset.async === 'true';
          script.defer = placeholder.dataset.defer === 'true';
          script.type = placeholder.dataset.type;
          if (placeholder.dataset.crossorigin) {
              script.crossOrigin = placeholder.dataset.crossorigin;
          }
          
          // Add load event listener
          script.onload = () => {
              
              // Reinitialize specific analytics if needed
              if (script.src.includes('fbevents.js')) {
                  initializeFbq();
              }
              // Add other analytics reinitializations as needed
          };
          
          placeholder.parentNode.replaceChild(script, placeholder);
          
      }
  });
  
  blockedScripts.length = 0;

  // Disconnect observers
  if (observer) observer.disconnect();
  headObserver.disconnect();
  
  // Restore original functions
  if (window.fbqBlocked) {
      delete window.fbqBlocked;
      loadScript("https://connect.facebook.net/en_US/fbevents.js", initializeFbq);
  }
}

// Add this new function to restore original functions
function restoreOriginalFunctions() {
    if (window.originalFetch) window.fetch = window.originalFetch;
    if (window.originalXHR) window.XMLHttpRequest = window.originalXHR;
    if (window.originalImage) window.Image = window.originalImage;
    
    if (window.fbqBlocked) {
        delete window.fbqBlocked;
        loadScript("https://connect.facebook.net/en_US/fbevents.js", initializeFbq);
    }
}

   function blockAnalyticsRequests() {
  // Fetch Blocking (Improved)
  const originalFetch = window.fetch;
  window.fetch = function (...args) {
      const url = args[0];
      if (typeof url === "string" && !consentState.analytics && isSuspiciousResource(url)) {
          
          return Promise.resolve(new Response(null, { status: 204, statusText: 'No Content' })); // More robust empty response
      }
      return originalFetch.apply(this, args);
  };

 
  const originalXHR = window.XMLHttpRequest;
  window.XMLHttpRequest = function() {
    const xhr = new originalXHR();
    const originalOpen = xhr.open;
    
    xhr.open = function(method, url) {
      if (typeof url === "string" && !consentState.analytics && isSuspiciousResource(url)) {
        
        return;
      }
      return originalOpen.apply(xhr, arguments); // Use xhr instead of this
    };
    return xhr;
  };
}


function blockMetaFunctions() {
  if (!consentState.analytics) {
    if (!window.fbqBlocked) {
      window.fbqBlocked = window.fbq || function () {
        
        window.fbq.queue.push(arguments);
      };
      window.fbqBlocked.queue = [];
      window.fbq = window.fbqBlocked;
      
    }
  } else {
    if (window.fbq === window.fbqBlocked) {
      delete window.fbqBlocked;
      delete window.fbq;
      
      // Direct load without delay
      loadScript("https://connect.facebook.net/en_US/fbevents.js", initializeFbq);
      
    }
  }
}
function initializeFbq() {
  if (window.fbq && window.fbq.queue) {
    window.fbq.queue.forEach(args => window.fbq.apply(null, args));
  }
  
}
let initialBlockingEnabled = true;  // Flag to control initial blocking

function blockAllInitialRequests() {
const originalFetch = window.fetch;
window.fetch = function (...args) {
    const url = args[0];
    if (initialBlockingEnabled && isSuspiciousResource(url)) {
        
        return Promise.resolve(new Response(null, { status: 204 }));
    }
    return originalFetch.apply(this, args);
};

const originalXHR = window.XMLHttpRequest;
  window.XMLHttpRequest = function() {
    const xhr = new originalXHR();
    const originalOpen = xhr.open;
    
    xhr.open = function(method, url) {
      if (initialBlockingEnabled && isSuspiciousResource(url)) {
        
        return;
      }
      return originalOpen.apply(xhr, arguments);
    };
    return xhr;
  };

const originalImage = window.Image;
window.Image = function(...args) {
    const img = new originalImage(...args);
    img.setAttribute = function(name, value) {
        if (name === 'src' && initialBlockingEnabled && isSuspiciousResource(value)) {
            
            return;
        }
        return originalSetAttribute.apply(this, arguments);
    };
    return img;
};
}   

function getClientIdentifier() {
return window.location.hostname; // Use hostname as the unique client identifier
}

  async function hashData(data) {
    const encoder = new TextEncoder();
    const dataBuffer = encoder.encode(data);
    const hashBuffer = await crypto.subtle.digest("SHA-256", dataBuffer);
    return Array.from(new Uint8Array(hashBuffer))
      .map((b) => b.toString(16).padStart(2, "0"))
      .join("");
  }

  async function generateKey() {
    const key = await crypto.subtle.generateKey(
      { name: "AES-GCM", length: 256 },
      true,
      ["encrypt", "decrypt"]
    );
    const iv = crypto.getRandomValues(new Uint8Array(12));
    const exportedKey = await crypto.subtle.exportKey("raw", key);
    return { secretKey: exportedKey, iv };
  }


  // Add these two functions here
async function importKey(rawKey) {
    return await crypto.subtle.importKey(
        "raw",
        rawKey,
        { name: "AES-GCM" },
        false,
        ["decrypt"]
    );
}

async function decryptData(encrypted, key, iv) {
    const encryptedBuffer = Uint8Array.from(atob(encrypted), c => c.charCodeAt(0));
    const decrypted = await crypto.subtle.decrypt(
        { name: "AES-GCM", iv },
        key,
        encryptedBuffer
    );
    return new TextDecoder().decode(decrypted);
}

  async function encryptData(data, key, iv) {
    const encoder = new TextEncoder();
    const encodedData = encoder.encode(data);
    const importedKey = await crypto.subtle.importKey(
      "raw",
      key,
      { name: "AES-GCM" },
      false,
      ["encrypt"]
    );
    const encrypted = await crypto.subtle.encrypt(
      { name: "AES-GCM", iv: iv },
      importedKey,
      encodedData
    );
    return btoa(String.fromCharCode(...new Uint8Array(encrypted)));
  }

  function getCookie(name) {
    const cookieString = document.cookie;
    if (!cookieString) return null;
    
    const cookies = Object.fromEntries(
        cookieString.split("; ").map(c => c.split("="))
    );
    
    return cookies[name] || null;
}


async function saveConsentState(preferences) {
  const clientId = getClientIdentifier(); 
  const visitorId = getCookie("visitorId") || crypto.randomUUID();
  const policyVersion = "1.2";
  const timestamp = new Date().toISOString();
  
  // Create simplified preferences object
  const consentPreferences = {
      analytics: preferences.analytics, // true for accept, false for reject
      timestamp: timestamp
  };

  // Generate encryption key and encrypt data
  const encryptionKey = await generateKey();
  const encryptedVisitorId = await encryptData(visitorId, encryptionKey.secretKey, encryptionKey.iv);
  const encryptedPreferences = await encryptData(JSON.stringify(consentPreferences), encryptionKey.secretKey, encryptionKey.iv);
  // Save to localStorage
  localStorage.setItem("consent-given", "true");
  localStorage.setItem("consent-preferences", JSON.stringify({
      encryptedData: encryptedPreferences,
      iv: Array.from(encryptionKey.iv),
      key: Array.from(new Uint8Array(encryptionKey.secretKey))
  }));
  localStorage.setItem("consent-timestamp", timestamp);
  localStorage.setItem("consent-policy-version", "1.2");

  // Prepare payload with encrypted data
  const payload = {
      clientId, 
      visitorId: { 
          encryptedData: encryptedVisitorId, 
          iv: Array.from(encryptionKey.iv), 
          key: Array.from(new Uint8Array(encryptionKey.secretKey)) 
      },
      preferences: { 
          encryptedData: encryptedPreferences, 
          iv: Array.from(encryptionKey.iv), 
          key: Array.from(new Uint8Array(encryptionKey.secretKey)) 
      },
      policyVersion
  };

  

  try {
      // Step 1: Request authentication token
      const tokenResponse = await fetch("https://app.consentbit.com/cmp/request-token");
      const tokenData = await tokenResponse.json();
      const token = tokenData.token;
      
      if (!token) {
          console.error("Failed to retrieve authentication token.");
          return;
      }

      

      // Step 2: Send consent data with token
      const response = await fetch("https://app.consentbit.com/cmp/consent", {
          method: "POST",
          headers: {
              "Content-Type": "application/json",
              "X-Request-Token": token
          },
          body: JSON.stringify(payload),
      });

      const text = await response.text();
      
  } catch (error) {
      console.error("Error sending consent data:", error);
  }
}
  
function isSuspiciousResource(url) {
    const suspiciousPatterns = /gtag|analytics|zoho|track|collect|googletagmanager|googleanalytics|metrics|pageview|stat|trackpageview|pixel|doubleclick|adservice|adwords|adsense|connect\.facebook\.net|fbevents\.js|facebook|meta|graph\.facebook\.com|business\.facebook\.com|pixel|quantserve|scorecardresearch|clarity\.ms|hotjar|mouseflow|fullstory|logrocket|mixpanel|segment|amplitude|heap|kissmetrics|matomo|piwik|plausible|woopra|crazyegg|clicktale|optimizely|hubspot|marketo|pardot|salesforce|intercom|drift|zendesk|freshchat|tawk|livechat|olark|purechat|snapengage|liveperson|boldchat|clickdesk|userlike|zopim|crisp|linkedin|twitter|pinterest|tiktok|snap|reddit|quora|outbrain|taboola|sharethrough|moat|integral-marketing|comscore|nielsen|quantcast|adobe|marketo|hubspot|salesforce|pardot|eloqua|act-on|mailchimp|constantcontact|sendgrid|klaviyo|braze|iterable|appsflyer|adjust|branch|kochava|singular|tune|attribution|chartbeat|parse\.ly|newrelic|datadog|sentry|rollbar|bugsnag|raygun|loggly|splunk|elastic|dynatrace|appoptics|pingdom|uptimerobot|statuscake|newrelic|datadoghq|sentry\.io|rollbar\.com|bugsnag\.com|raygun\.io|loggly\.com|splunk\.com|elastic\.co|dynatrace\.com|appoptics\.com|pingdom\.com|uptimerobot\.com|statuscake\.com|clarity|clickagy|yandex|baidu/;
    return suspiciousPatterns.test(url);
}

const headObserver = new MutationObserver(mutations => {
  mutations.forEach(mutation => {
      mutation.addedNodes.forEach(node => {
        
          if (node.tagName === 'SCRIPT' && isSuspiciousResource(node.src)) {
              
              node.remove(); // Remove the script before it runs
          }
      });
  });
});

headObserver.observe(document.head, { childList: true });

const blockedScripts = []; // Array to store blocked script elements

function blockDynamicScripts() {
  if (observer) observer.disconnect();
  observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
          mutation.addedNodes.forEach((node) => {
              if (node.tagName === "SCRIPT" && !consentState.analytics && isSuspiciousResource(node.src)) {
                  
                  node.remove();
              }
              if (node.tagName === "IFRAME" && !consentState.analytics && isSuspiciousResource(node.src)) {
                  
                  node.remove();
              }
              // Block dynamically added images (for tracking pixels)
              if (node.tagName === "IMG" && !consentState.analytics && isSuspiciousResource(node.src)) {
                  
                  node.remove();
              }
          });
      });
  });

  observer.observe(document.body, { childList: true, subtree: true });
}

function scanAndBlockScripts() {

  const scripts = document.querySelectorAll("script[src]");
  const inlineScripts = document.querySelectorAll("script:not([src])");
  
  // Handle external scripts
  scripts.forEach(script => {
      if (isSuspiciousResource(script.src)) {
        
          const placeholder = createPlaceholder(script);
          script.parentNode.replaceChild(placeholder, script);
          blockedScripts.push(placeholder);
      }
  });

  // Handle inline scripts
  inlineScripts.forEach(script => {
      const content = script.textContent;
      if (content.match(/gtag|ga|fbq|twq|pintrk|snaptr|_qevents|dataLayer/)) {
          
          script.remove();
      }
  });
}
// Move createPlaceholder function outside of scanAndBlockScripts
function createPlaceholder(script) {
    const placeholder = document.createElement('script');
    placeholder.type = 'text/placeholder';
    placeholder.dataset.src = script.src;
    placeholder.dataset.async = script.async || false;
    placeholder.dataset.defer = script.defer || false;
    placeholder.dataset.type = script.type || 'text/javascript';
    placeholder.dataset.crossorigin = script.crossOrigin || '';
    return placeholder;
}

  function createPlaceholderScripts() {
    const allScripts = document.querySelectorAll('script');
    allScripts.forEach(script => {
        if (isSuspiciousResource(script.src)) {
            const placeholder = document.createElement('script');
            placeholder.type = 'text/placeholder'; // Mark as placeholder
            placeholder.dataset.src = script.src; // Store original source
            placeholder.dataset.async = script.async; // Store original async
            script.parentNode.replaceChild(placeholder, script); // Replace with placeholder
            blockedScripts.push(placeholder);
            
        }
    });
}

function revalidateBlockedScripts() {
  if (!consentState.analytics) {
      
      scanAndBlockScripts();
      blockDynamicScripts();
  }
}

function updateConsentState(preferences) {
  
  consentState = preferences;
  initialBlockingEnabled = !preferences.analytics;
  
  if (preferences.analytics) {
      
      unblockScripts();
  } else {
      
      blockAllScripts();
  }
  
  saveConsentState(preferences);
}

function loadScript(src, callback) {
  const script = document.createElement("script");
  script.src = src;
  script.async = true;
  script.onload = callback;
  document.head.appendChild(script);
  
}

// ... existing code ...

function initializeBanner() {
  
  
  // Wait for DOM to be fully loaded
  if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', attachBannerHandlers);
  } else {
      attachBannerHandlers();
  }
}


function showBanner(banner) {
  if (banner) {
    banner.classList.add("show-banner");
    banner.classList.remove("hidden");
      
  }
}

function hideBanner(banner) {
  if (banner) {
    banner.classList.remove("show-banner");
    banner.classList.add("hidden");
      
  }
}

function attachBannerHandlers() {


    const hostname = window.location.hostname;
    console.log('Current hostname:', hostname);
    console.log('Available configs:', window.SITE_CONFIGS);
    const siteConfig = window.SITE_CONFIGS[hostname];
    console.log('Detected config:', siteConfig);
  
    if (siteConfig?.bannerType === 'ccpa') {
      console.log('Initializing CCPA banner handlers');
      
      // Get banner elements
      const initialBanner = document.getElementById("initial-consent-banner");
      const mainBanner = document.getElementById("main-consent-banner");
      const doNotShareLink = document.getElementById("do-not-share-link");
      const savePrefsButton = document.getElementById("save-preferences-btn");
      const closeButton = document.getElementById("close-consent-banner");
      const cancelButton = document.getElementById("cancel-btn");
      const doNotShareCheckbox = document.getElementById("do-not-share-checkbox");
      const toggleConsentButton = document.getElementById("toggle-consent-btn");
  
      function showInitialBanner() {
        if (initialBanner) {
          initialBanner.style.display = 'block';
          mainBanner.style.display = 'none';
        }
      }
  
      function showMainBanner() {
        if (mainBanner) {
          initialBanner.style.display = 'none';
          mainBanner.style.display = 'block';
        }
      }
  
      function hideAllBanners() {
        if (initialBanner) initialBanner.style.display = 'none';
        if (mainBanner) mainBanner.style.display = 'none';
      }
  
      // Attach event listeners
      if (toggleConsentButton) {
        toggleConsentButton.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          showInitialBanner();
        });
      }
  
      if (doNotShareLink) {
        doNotShareLink.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          showMainBanner();
        });
      }
  
      if (closeButton) {
        closeButton.addEventListener('click', (e) => {
          e.preventDefault();
          hideAllBanners();
        });
      }
  
      if (cancelButton) {
        cancelButton.addEventListener('click', (e) => {
          e.preventDefault();
          hideAllBanners();
        });
      }
  
      if (savePrefsButton && doNotShareCheckbox) {
        savePrefsButton.addEventListener('click', async (e) => {
          e.preventDefault();
          const doNotShare = doNotShareCheckbox.checked;
          const preferences = {
            analytics: !doNotShare,
            ccpa: {
              doNotShare: doNotShare,
              timestamp: new Date().toISOString()
            }
          };
          await updateConsentState(preferences);
          hideAllBanners();
        });
      }
  
      // Initialize banner visibility
      const consentGiven = localStorage.getItem("consent-given");
        if (consentGiven !== "true") {
            showInitialBanner();
        }
        return;
    } else{
      // Regular consent banner code continues here...  
      const acceptButton = document.getElementById("accept-btn");
      const rejectButton = document.getElementById("decline-btn");
      const toggleConsentButton = document.getElementById("toggle-consent-btn");
  
  
  // Accept button handler
  if (acceptButton) {
      acceptButton.addEventListener("click", async function(e) {
          e.preventDefault();
          
          const preferences = { analytics: true };
          await updateConsentState(preferences);
          unblockScripts();
          hideBanner(consentBanner);
          initialBlockingEnabled = false;
      });
  }

  // Reject button handler
  if (rejectButton) {
      rejectButton.addEventListener("click", async function(e) {
          e.preventDefault();
          
          const preferences = { analytics: false };
          await updateConsentState(preferences);
          blockAllScripts();
          hideBanner(consentBanner);
          initialBlockingEnabled = true;
      });
  }
  const consentBanner = document.getElementById("consent-banner");
  // Change Consent button handler
  if (toggleConsentButton) {
      toggleConsentButton.addEventListener("click", function(e) {
          e.preventDefault();
          
          showBanner(consentBanner);
      });
  }

  // Initialize blocking and banner visibility
  initializeBlocking();
}

// Updated initialization function
async function initializeBlocking() {

  const consentGiven = localStorage.getItem("consent-given");
  const consentBanner = document.getElementById("consent-banner");

  if (consentBanner) {
    hideBanner(consentBanner);
  }

  if (consentGiven === "true") {
      try {
          const savedPreferences = JSON.parse(localStorage.getItem("consent-preferences"));
          if (savedPreferences?.encryptedData) {
              const decryptedData = await decryptData(
                  savedPreferences.encryptedData,
                  await importKey(Uint8Array.from(savedPreferences.key)),
                  Uint8Array.from(savedPreferences.iv)
              );
              const preferences = JSON.parse(decryptedData);
              initialBlockingEnabled = !preferences.analytics;
              
              // Keep banner hidden and apply appropriate blocking
              hideBanner(consentBanner);
              if (initialBlockingEnabled) {
                  blockAllScripts();
              } else {
                  unblockScripts();
              }
          }
      } catch (error) {
          console.error("Error loading consent state:", error)
          initialBlockingEnabled = true;
          showBanner(consentBanner);
      }
  } else {
      // No consent given, show banner and enable blocking
      initialBlockingEnabled = true;
      showBanner(consentBanner);
      blockAllScripts();
  }
  
  
}

// Window attachments
window.loadConsentState = loadConsentState;
window.blockMetaFunctions = blockMetaFunctions;
window.blockAllInitialRequests = blockAllInitialRequests;
window.blockAnalyticsRequests = blockAnalyticsRequests;
window.scanAndBlockScripts = scanAndBlockScripts;
window.blockDynamicScripts = blockDynamicScripts;
window.updateConsentState = updateConsentState;
window.initializeBanner= initializeBanner;
window.initializeBlocking = initializeBlocking;
window.attachBannerHandlers = attachBannerHandlers;
window.initializeAll = initializeAll;
window.showBanner = showBanner;
window.hideBanner = hideBanner;
window.importKey = importKey;         
window.decryptData = decryptData;   
window.unblockScripts = unblockScripts;
window.createPlaceholderScripts = createPlaceholderScripts;
window.restoreOriginalFunctions = restoreOriginalFunctions;


function initializeAll() {
  if (isInitialized) {
    
    return;
  }
  
  
  // Block everything first
  blockAllInitialRequests();
  blockAllScripts();
  
  // Then load state and initialize banner
  loadConsentState().then(() => {
    initializeBanner();
    
    isInitialized = true;
  });
 }
    
    // Set up periodic script checking
    setInterval(revalidateBlockedScripts, 5000);
})();`;
console.log('Starting worker initialization');
(() => {
  var __defProp = Object.defineProperty;
  var __name = (target, value) =>
    __defProp(target, "name", { value, configurable: true });

  addEventListener("fetch", (event) => {
    event.respondWith(handleRequest(event.request));
  });

  
  const corsHeaders = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type, X-Request-Token",
    "Access-Control-Allow-Credentials": "true",
    "Access-Control-Max-Age": "86400",
  };
  async function handleRequest(request) {
    // Log incoming request
    console.log('Handling request:', request.url);
    
    const url = new URL(request.url);
    const path = url.pathname;
  
    console.log('Request path:', path);
  
    // Handle CORS preflight
    if (request.method === "OPTIONS") {
      return new Response(null, {
        status: 204,
        headers: corsHeaders
      });
    }
  
    // Route handling
    try {
      switch (path) {
        case "/cmp/request-token":
          console.log('Generating token...');
          const token = await generateToken();
          console.log('Token generated successfully');
          
          return new Response(
            JSON.stringify({ 
              token,
              status: 'success' 
            }), 
            {
              status: 200,
              headers: {
                "Content-Type": "application/json",
                "Cache-Control": "no-store, private",
                ...corsHeaders
              }
            }
          );
  
        case "/cmp/consent":
          return await handleConsentRequest(request, corsHeaders);
  
        case "/cmp/cmp-script":

          

          return new Response(CMP_SCRIPT, {
            headers: {
              "Content-Type": "application/javascript",
              "Cache-Control": "no-store, no-cache, must-revalidate",
              ...corsHeaders
            }
          });
  
        default:
          console.log('Path not found:', path);
          return new Response(
            JSON.stringify({ 
              error: "Endpoint not found",
              path: path 
            }), 
            {
              status: 404,
              headers: {
                "Content-Type": "application/json",
                ...corsHeaders
              }
            }
          );
      }
    } catch (error) {
      console.error('Request handling error:', error);
      return new Response(
        JSON.stringify({ 
          error: "Internal server error",
          message: error.message 
        }), 
        {
          status: 500,
          headers: {
            "Content-Type": "application/json",
            ...corsHeaders
          }
        }
      );
    }
  }
  
// Token generation
async function generateToken() {
  try {
    const array = new Uint8Array(32);
    crypto.getRandomValues(array);
    
    const token = btoa(String.fromCharCode(...array))
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=/g, '');

    return token;
  } catch (error) {
    console.error("Error generating token:", error);
    throw new Error("Token generation failed");
  }
}

  async function validateToken(token) {
    if (!token) return false;

    token = decodeURIComponent(token);
    const kvKey = `auth-token-${token}`;

    try {
      const storedToken = await CMP_STORAGE.get(kvKey);
      
      if (storedToken === "valid") {
        // Delete token after use
        await CMP_STORAGE.delete(kvKey);
        return true;
      }
    } catch (error) {
      console.error("Error validating token:", error)
    }

    return false;
  }
  
  async function generateVisitorId(request) {
    const ip = request.headers.get("CF-Connecting-IP") || "unknown-ip";
    const userAgent = request.headers.get("User-Agent") || "unknown-ua";
    const data = `${ip}:${userAgent}`;
    const encoder = new TextEncoder();
    const hashBuffer = await crypto.subtle.digest("SHA-256", encoder.encode(data));

    // Ensure proper Base64 encoding
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashBase64 = btoa(String.fromCharCode(...hashArray));

    return hashBase64.slice(0, 32);
  }

  function getCookie(request, name) {
    const cookieHeader = request.headers.get("Cookie");
    if (!cookieHeader) return null;
    const cookies = Object.fromEntries(
      cookieHeader.split("; ").map((c) => c.split("="))
    );
    return cookies[name] || null;
  }

  async function handleConsentRequest(request, corsHeaders) {
    const headers = new Headers(corsHeaders);
    headers.append("Content-Type", "application/json");

    try {
        if (request.method === "POST") {
            console.log("Received POST request to /consent");
            const data = await request.json();
            console.log("Raw encrypted request body:", data);

            // Decrypt visitor ID
            const decryptedVisitorId = await decryptData(
                data.visitorId.encryptedData,
                await importKey(Uint8Array.from(data.visitorId.key)),
                Uint8Array.from(data.visitorId.iv)
            );

            // Decrypt preferences
            const decryptedPreferences = await decryptData(
                data.preferences.encryptedData,
                await importKey(Uint8Array.from(data.preferences.key)),
                Uint8Array.from(data.preferences.iv)
            );
            const preferences = JSON.parse(decryptedPreferences);

            if (!data.clientId || !decryptedVisitorId || !preferences) {
                return new Response(JSON.stringify({ error: "Missing required fields" }), {
                    status: 400,
                    headers,
                });
            }

            // Create consent data object with decrypted values
            const consentData = {
                clientId: data.clientId,
                visitorId: decryptedVisitorId,
                preferences: preferences,
                ip: request.headers.get("CF-Connecting-IP") || "unknown",
                userAgent: request.headers.get("User-Agent") || "unknown",
                timestamp: preferences.timestamp || new Date().toISOString(),
                policyVersion: data.policyVersion
            };

            const kvKey = `${data.clientId}:${decryptedVisitorId}`;
            console.log("KV key to store:", kvKey);

            try {
                await CMP_STORAGE.put(kvKey, JSON.stringify(consentData));
                
            } catch (error) {
                console.error(`KV storage error for ${kvKey}:`, error);
                return new Response("Error storing consent data", { status: 500, headers });
            }

            // Set cookies with decrypted values
            headers.append(
                "Set-Cookie",
                `visitor-id=${decryptedVisitorId}; Path=/; HttpOnly; Secure; SameSite=Lax`
            );
            headers.append(
                "Set-Cookie",
                `consent-type=${preferences.analytics ? "accept" : "reject"}; Path=/; Max-Age=31536000; Secure; SameSite=Strict`
            );

            return new Response(JSON.stringify({ 
                message: "Encrypted consent data saved and decrypted successfully", 
                consentData 
            }), {
                status: 200,
                headers,
            });
        }

        return new Response(JSON.stringify({ error: "Method not allowed" }), {
            status: 405,
            headers,
        });
    } catch (error) {
        console.error("Error processing encrypted consent:", error);
        return new Response(JSON.stringify({ 
            error: "Error processing consent",
            details: error.message 
        }), { 
            status: 500, 
            headers 
        });
    }
}
  async function listKVEntries() {
    try {
      const list = await CMP_STORAGE.list();
      const entries = [];
      
      for (const key of list.keys) {
        const value = await CMP_STORAGE.get(key.name);
        entries.push({
          key: key.name,
          value: value
        });
      }
  
      return new Response(JSON.stringify(entries, null, 2), {
        headers: {
          "Content-Type": "application/json",
          ...corsHeaders
        }
      });
    } catch (error) {
      console.error("Error listing KV entries:", error);
      return new Response(JSON.stringify({ error: "Failed to list entries" }), {
        status: 500,
        headers: {
          "Content-Type": "application/json",
          ...corsHeaders
        }
      });
    }
  }
  async function handleAuthorizationRequest() {
    const clientId = "804657f91fb6efa7c9f530cea7434122bed8854be8d5574cd2c7b827add97406";
    const redirectUri = "https://app.consentbit.com/cmp/callback";
    const authUrl = `https://webflow.com/oauth/authorize?client_id=${clientId}&response_type=code&redirect_uri=${encodeURIComponent(redirectUri)}`;
    return Response.redirect(authUrl, 302);
  }

  async function exchangeCodeForToken(code) {
    const clientId = "804657f91fb6efa7c9f530cea7434122bed8854be8d5574cd2c7b827add97406";
    const clientSecret = "922728538ac15a7b4c8753f955fcd61b261d126f37bad00dbdb5f6220a59cd0b";
    const redirectUri = "https://app.consentbit.com/cmp/callback";

    const response = await fetch("https://api.webflow.com/oauth/access_token", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        client_id: clientId,
        client_secret: clientSecret,
        grant_type: "authorization_code",
        code: code,
        redirect_uri: redirectUri,
      }),
    });

    return response.json();
  }

  // Encryption & decryption functions
  async function importKey(rawKey) {
    return await crypto.subtle.importKey(
      "raw",
      rawKey,
      { name: "AES-GCM" },
      true,
      ["encrypt", "decrypt"]
    );
  }

  async function decryptData(encrypted, key, iv) {
    console.log("Attempting decryption...");
    const encryptedBuffer = Uint8Array.from(atob(encrypted), (c) =>
      c.charCodeAt(0)
    );
    const decrypted = await crypto.subtle.decrypt(
      { name: "AES-GCM", iv: iv },
      key,
      encryptedBuffer
    );
    return new TextDecoder().decode(decrypted);
  }
  addEventListener("fetch", event => {
    event.respondWith(handleRequest(event.request));
  });

  __name(handleRequest, "handleRequest");
  __name(handleConsentRequest, "handleConsentRequest");
  // Name assignments
  __name(handleRequest, "handleRequest");
  __name(generateToken, "generateToken");
  __name(validateToken, "validateToken");
})();
